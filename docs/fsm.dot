digraph finite_state_machine {
	rankdir=LR;
	size="8,5"

	node [shape = diamond]; "Start";
	node [shape = doublecircle];
	node [shape = circle];

	// Operators
	{
		node [shape = circle];
		// node [shape = doublecircle]; "RNG"; "ORNG"; "AND"; "OR"; "NULL"; "EQ"; "NEQ"; "GEQ"; "LEQ"; "ARROW"; "ASSIGN"; "GT"; "LT"; "PLUS"; "MINUS"; "STAR"; "SLASH"; "LPAREN"; "RPAREN"; "LBRACE"; "RBRACE"; "COMMA"; "COLON"; "EQUAL"; "QUEST"; "EXCLA";
		node [shape = doublecircle]; "OPERATOR";

		"Start" -> "OPERATOR" [ label = "*note1" ];

		// "Start" -> "RNG" [ label = "'...'" ];
		// "Start" -> "ORNG" [ label = "'..<'" ];
		// "Start" -> "AND" [ label = "'&&'" ];
		// "Start" -> "OR" [ label = "'||'" ];
		// "Start" -> "NULL" [ label = "'??'" ];
		// "Start" -> "EQ" [ label = "'=='" ];
		// "Start" -> "NEQ" [ label = "'!='" ];
		// "Start" -> "GEQ" [ label = "'>='" ];
		// "Start" -> "LEQ" [ label = "'<='" ];
		// "Start" -> "ARROW" [ label = "'->'" ];
		// "Start" -> "ASSIGN" [ label = "'='" ];
		// "Start" -> "GT" [ label = "'>'" ];
		// "Start" -> "LT" [ label = "'<'" ];
		// "Start" -> "PLUS" [ label = "'+'" ];
		// "Start" -> "MINUS" [ label = "'-'" ];
		// "Start" -> "STAR" [ label = "'*'" ];
		// "Start" -> "SLASH" [ label = "'/'" ];
		// "Start" -> "LPAREN" [ label = "'('" ];
		// "Start" -> "RPAREN" [ label = "')'" ];
		// "Start" -> "LBRACE" [ label = "'{'" ];
		// "Start" -> "RBRACE" [ label = "'}'" ];
		// "Start" -> "COMMA" [ label = "','" ];
		// "Start" -> "COLON" [ label = "':'" ];
		// "Start" -> "EQUAL" [ label = "'='" ];
		// "Start" -> "QUEST" [ label = "'?'" ];
		// "Start" -> "EXCLA" [ label = "'!'" ];
	}

	// Whitespace
	{
		node [shape = circle]; "SLCMT"; "MLCMT";
		node [shape = doublecircle]; "SP"; "LF"; "SLCMT_e"; "MLCMT_e";

		// Space-like white space
		"Start" -> "SP" [ label = "(SP|FF|TAB)" ];
		// "Start" -> "SP" [ label = "SP" ];
		// "Start" -> "SP" [ label = "FF" ];
		// "Start" -> "SP" [ label = "TAB" ];

		// Line-break white space
		"Start" -> "LF" [ label = "(LF|CR+LF)" ];
		// "Start" -> "LF" [ label = "LF" ];
		// "Start" -> "LF" [ label = "CRLF" ];

		// Single-line comment white space
		"Start" -> "SLCMT" [ label = "'//'" ];

		// Multi-line comment white space
		"Start" -> "MLCMT" [ label = "'/*' / dpt1 = 1" ];

		//subgraph cluster_whitespace {
			// style=filled;
			// color=lightgrey;
			// node [style=filled,color=white];
			label = "Whitespace";

			// Space-like white space
			"SP" -> "SP" [ label = "(SP|FF|TAB)" ];
			// "SP" -> "SP" [ label = "SP" ];
			// "SP" -> "SP" [ label = "FF" ];
			// "SP" -> "SP" [ label = "TAB" ];

			// Line-break white space
			"LF" -> "LF" [ label = "(LF|CR+LF)" ];
			// "LF" -> "LF" [ label = "LF" ];
			// "LF" -> "LF" [ label = "CRLF" ];

			// Single-line comment white space
			"SLCMT" -> "SLCMT" [ label = "any" ];
			"SLCMT" -> "SLCMT_e" [ label = "(LF|CR|EOF)" ];
			// "SLCMT" -> "SLCMT_e" [ label = "LF" ];
			// "SLCMT" -> "SLCMT_e" [ label = "CR" ];
			// "SLCMT" -> "SLCMT_e" [ label = "EOF" ];

			// Multi-line comment white space
			"MLCMT" -> "MLCMT" [ label = "any" ];
			"MLCMT" -> "MLCMT" [ label = "'/*' / dpt1++" ];
			// "MLCMT" -> "MLCMT" [ label = "'*/' / dpt1--" ];
			"MLCMT" -> "MLCMT_e" [ label = "'*/' / dpt1--" ];
			"MLCMT_e" -> "MLCMT" [ label = "ε / dpt1 != 0" ];
		//}
	}

	// Numbers
	{
		node [shape = circle]; "N_dot"; "N_e"; "N_e_s";
		// node [shape = circle]; "BIN"; "OCT"; "HEX";
		node [shape = doublecircle]; "N_dec";

		"Start" -> "N_dec" [ label = "/[0-9]/" ];
		// "Start" -> "BIN" [ label = "0b" ];
		// "Start" -> "OCT" [ label = "0o" ];
		// "Start" -> "HEX" [ label = "0x" ];

		//subgraph cluster_number {
			// style=filled;
			// color=lightgrey;
			// node [style=filled,color=white];
			label = "Number";

			// Base 10
			"N_dec" -> "N_dec" [ label = "/[0-9_]/" ];
			"N_dec" -> "N_dot" [ label = "'.'" ];
			"N_dot" -> "N_flt" [ label = "/[0-9]/" ];
			"N_flt" -> "N_flt" [ label = "/[0-9_]/" ];
			"N_flt" -> "N_e" [ label = "/[eE]/" ];
			"N_dec" -> "N_e" [ label = "/[eE]/" ];
			"N_e" -> "N_e_s" [ label = "/[+-]/" ];
			"N_e_s" -> "N_exp" [ label = "/[0-9]/" ];
			"N_e" -> "N_exp" [ label = "/[0-9]/" ];
			"N_exp" -> "N_exp" [ label = "/[0-9_]/" ];


			// Other bases
			// "BIN" -> "BIN_d" [ label = "/[01]/" ];
			// "BIN_d" -> "BIN_d" [ label = "/[01_]/" ];

			// "OCT" -> "OCT_d" [ label = "/[0-7]/" ];
			// "OCT_d" -> "OCT_d" [ label = "/[0-7_]/" ];

			// "HEX" -> "HEX_d" [ label = "/[0-9a-fA-F]/" ];
			// "HEX_d" -> "HEX_d" [ label = "/[0-9a-fA-F_]/" ];
		//}
	}

	//Identifiers
	{
		node [shape = circle];
		node [shape = doublecircle]; "ID";

		"Start" -> "ID" [ label = "/[a-zA-Z_]/" ];

		//subgraph cluster_identifier {
			// style=filled;
			// color=lightgrey;
			// node [style=filled,color=white];
			label = "Identifier";

			"ID" -> "ID" [ label = "/[a-zA-Z0-9_]/" ];
		//}
	}

	// Strings
	{
		node [shape = circle]; "STR"; "MLSTR"; "STR_esc"; "STR_u"; "MLSTR_esc"; "MLSTR_u"; /*"MLSTR_i";*/
		node [shape = doublecircle]; "STR_e"; "MLSTR_e";

		"Start" -> "STR" [ label = "'\"'" ];
		"Start" -> "MLSTR" [ label = "'\"\"\"'" ];

		//subgraph cluster_string {
			// style=filled;
			// color=lightgrey;
			// node [style=filled,color=white];
			label = "String";

			// Single-line string
			"STR" -> "STR" [ label = "/[\\x20-\\x7E]/" ];

			"STR" -> "STR_esc" [ label = "'\\'" ];
			// "STR_esc" -> "STR" [ label = "'0'" ];
			// "STR_esc" -> "STR" [ label = "'\\'" ];
			// "STR_esc" -> "STR" [ label = "'t'" ];
			// "STR_esc" -> "STR" [ label = "'n'" ];
			// "STR_esc" -> "STR" [ label = "'r'" ];
			// "STR_esc" -> "STR" [ label = "'\"'" ];
			// "STR_esc" -> "STR" [ label = "\"'\"" ];
			"STR_esc" -> "STR" [ label = "/[\\\\0tnr\"']/" ];
			// "STR_esc" -> "STR" [ label = "any" ];
			"STR_esc" -> "STR_u" [ label = "'u{'" ];
			// "STR_esc" -> "STR_i" [ label = "'('" ];

			"STR_u" -> "STR_u" [ label = "/[0-9a-fA-F]/" ];
			"STR_u" -> "STR" [ label = "'}'" ];

			// "STR_i" -> "Start" [ label = "ε / *note2" ];
			"STR_esc" -> "Start" [ label = "'(' / *note2" ];
			"Start" -> "STR" [ label = "')' / *note3" ];

			"STR" -> "STR_e" [ label = "'\"'" ];


			// Multi-line string
			"MLSTR" -> "MLSTR" [ label = "any" ];
			
			"MLSTR" -> "MLSTR_esc" [ label = "'\\'" ];
			"MLSTR_esc" -> "MLSTR" [ label = "/[\\\\0tnr\"']/" ];
			//"MLSTR_esc" -> "MLSTR" [ label = "any" ];
			"MLSTR_esc" -> "MLSTR_u" [ label = "'u{'" ];
			// "MLSTR_esc" -> "MLSTR_i" [ label = "'('" ];

			"MLSTR_u" -> "MLSTR_u" [ label = "/[0-9a-fA-F]/" ];
			"MLSTR_u" -> "MLSTR" [ label = "'}'" ];

			// "MLSTR_i" -> "Start" [ label = "ε / *note2" ];
			"MLSTR_esc" -> "Start" [ label = "'(' / *note2" ];
			"Start" -> "MLSTR" [ label = "')' / *note3" ];

			"MLSTR" -> "MLSTR_e" [ label = "'\"\"\"'" ];
		//}
	}
}